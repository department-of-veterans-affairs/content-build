name: Content Release

on:
  workflow_dispatch:
    inputs:
      release_wait:
        description: "Minutes to wait before creating release"
        required: false
        default: 5
  # schedule:
  #   - cron: "0 13-16,20-21 * * 1-5"
  #   - cron: "45 17 * * 1-5"

# TODO: Change to correct channel_id when ready
env:
  CHANNEL_ID: C024DUC9S1K # -test-tim-accessibility-gha
  DSVA_SCHEDULE_ENABLED: true

jobs:
  start-runner:
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    env:
      INSTANCE_TYPE: c5.4xlarge

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store 
        uses: marvinpinto/action-inject-ssm-secrets@latest 
        with: 
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN  

      - name: Get latest GHA Runner AMI ID # AMI images are rebuilt every 15 days, use the latest one
        run: |
          echo "RUNNER_AMI_ID=$(aws ec2 describe-images \
          --owners 008577686731 \
          --filters Name=state,Values=available \
          --filters Name=name,Values=packer-gha-runner-ubuntu2004* \
          --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
          --output text)" >> $GITHUB_ENV

      - name: Get Subnet with the most free IPs # We will run these in the dsva-vagov-utility-2x subnet, so filter for those
        run: |
          echo "SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=tag:Name,Values=dsva-vagov-utility-subnet-2*" \
          --query 'sort_by(Subnets,&AvailableIpAddressCount)[-1].SubnetId' \
          --output text)" >> $GITHUB_ENV

      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          ec2-image-id: ${{ env.RUNNER_AMI_ID }}
          ec2-instance-type: ${{ env.INSTANCE_TYPE }}
          subnet-id: ${{ env.SUBNET_ID }}
          security-group-id: sg-0e23b56be3798e3a1
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "dsva-vagov-vets-website-on-demand-runner"},
              {"Key": "project", "Value": "vagov"},
              {"Key": "office", "Value": "dsva"},
              {"Key": "application", "Value": "on-demand-gha-runner"},
              {"Key": "VAECID", "Value": "AWG20180517003"},
              {"Key": "environment", "Value": "utility"}
            ]

  set-env:
    name: Set Env Variables
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG_VERSION: ${{ steps.get-latest-tag.outputs.LATEST_TAG_VERSION }}
      RELEASE_WAIT: ${{ env.RELEASE_WAIT }}
      REF: ${{ steps.get-latest-release.outputs.target_commitish }}

    steps:
      - name: Cancel workflow due to DSVA schedule
        if: ${{ env.DSVA_SCHEDULE_ENABLED != 'true' }}
        uses: andymckay/cancel-action@0.2

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-latest-tag
        run: echo ::set-output name=LATEST_TAG_VERSION::$(git fetch --all --tags > /dev/null && git tag -l | sort -V --reverse | head -n 1)

      - name: Get latest release
        id: get-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0

      - name: Get release wait time (scheduled release)
        if: ${{ github.event.schedule != '' }}
        run: echo "RELEASE_WAIT=0" >> $GITHUB_ENV

      - name: Get release wait time (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "RELEASE_WAIT=${{ github.event.inputs.release_wait }}" >> $GITHUB_ENV

  validate-build-status:
    name: Validate Build Status
    runs-on: ubuntu-latest
    needs: set-env

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: ~/.cache/yarn
          path: |
            ~/.cache/yarn
            node_modules

      - name: Validate build status
        run: node ./script/github-actions/validate-build-status.js ${{ needs.set-env.outputs.REF }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-start:
    name: Notify Start
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Notify Slack
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "good", "text": "Stand by, content release for content-build coming up. <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"}]'
          channel_id: ${{ env.CHANNEL_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  build:
    name: Build
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: [set-env, notify-start, validate-build-status, start-runner]
    defaults:
      run:
        working-directory: content-build

    # TODO: Uncomment when ready for prod
    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem
      BUILDTYPE: vagovprod
      CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver
      # DRUPAL_ADDRESS: http://internal-dsva-vagov-prod-cms-2000800896.us-gov-west-1.elb.amazonaws.com
      DRUPAL_ADDRESS: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build
          ref: ${{ needs.set-env.outputs.REF }}

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            **/node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: cd content-build && yarn install --frozen-lockfile --prefer-offline
          max_attempts: 3
          timeout_minutes: 7
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Build
        run: yarn build --buildtype=${{ env.BUILDTYPE }} --drupal-address="${{ env.DRUPAL_ADDRESS }}" --no-drupal-proxy
        timeout-minutes: 30
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        run: node ./script/github-actions/check-broken-links.js ${{ env.BUILDTYPE }}

      - name: Generate build details
        run: |
          cat > build/${{ env.BUILDTYPE }}/BUILD.txt << EOF
          BUILDTYPE=${{ env.BUILDTYPE }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ needs.set-env.outputs.REF }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ env.BUILDTYPE }}

      - name: Compress build
        run: tar -C build/${{ env.BUILDTYPE }} -cf ${{ env.BUILDTYPE }}.tar.bz2 .

      - name: Persist prearchived build
        run: |
          mkdir -p /tmp/${{ github.run_id }}
          rm -rf /tmp/${{ github.run_id }}/${{ env.BUILDTYPE }}
          mv ${{ env.BUILDTYPE }}.tar.bz2 /tmp/${{ github.run_id }}

  archive:
    name: Archive
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: [set-env, build, start-runner]

    steps:
      - name: Restore vagovprod build
        run: |
          mv /tmp/${{ github.run_id }}/vagovprod.tar.bz2 .
          df -h
          du -h vagovprod.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload build
        run: aws s3 cp vagovprod.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/${{needs.set-env.outputs.REF}}/vagovprod.tar.bz2 --acl public-read --region us-gov-west-1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [set-env, archive]

    steps:
      - name: Waiting to release 
        run: |
          echo "Waiting to release: https://github.com/${{github.repository}}/compare/${{needs.set-env.outputs.LATEST_TAG_VERSION}}...${{needs.set-env.outputs.REF}}"

      - name: Sleep for ${{ needs.set-env.outputs.RELEASE_WAIT }} minutes
        uses: whatnick/wait-action@master
        with:
          time: ${{ needs.set-env.outputs.RELEASE_WAIT }}m

      - name: Get next tag version
        id: bump-tag-version
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ needs.set-env.outputs.LATEST_TAG_VERSION }}

      - name: Echo next version
        run: echo "${{ steps.bump-tag-version.outputs.v_patch }}"

      # TODO: Uncomment when ready for prod
      # - name: Tag release
      #   run: git tag ${{ steps.bump-tag-version.outputs.v_patch }} ${{ needs.set-env.outputs.REF }} && git push origin ${{ steps.bump-tag-version.outputs.v_patch }} 

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [set-env, create-release]

    # TODO: Uncomment when ready for prod
    env:
      # ENVIRONMENT: vagovprod
      # BUCKET: content.www.va.gov
      ENVIRONMENT: vagovdev
      BUCKET: content.dev.va.gov

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Deploy
        run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
        env:
          SRC: s3://vetsgov-website-builds-s3-upload/content-build/${{needs.set-env.outputs.REF}}/${{env.ENVIRONMENT}}.tar.bz2
          DEST: s3://${{ env.BUCKET }}

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    if: ${{ failure() || cancelled() }}
    needs: deploy

    steps:
      - name: Checkout
        if: ${{ env.DSVA_SCHEDULE_ENABLED == 'true' }}
        uses: actions/checkout@v2

      - name: Notify Slack
        if: ${{ env.DSVA_SCHEDULE_ENABLED == 'true' }}
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "Content release for content-build has failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"}]'
          channel_id: ${{ env.CHANNEL_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  stop-runner:
    name: Stop on-demand-runner
    needs: [archive, start-runner]
    runs-on: ubuntu-latest
    if: ${{ always() }} # Even if an error happened, let's stop the runner
    env:
      INSTANCE_TYPE: c5.4xlarge

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store 
        uses: marvinpinto/action-inject-ssm-secrets@latest 
        with: 
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN 

      - name: Stop Runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
