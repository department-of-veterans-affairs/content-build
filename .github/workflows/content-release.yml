name: Content Release

on:
  workflow_dispatch:
    inputs:
      release_wait:
        description: Minutes to wait before creating release
        required: false
        default: 0
      deploy_environment:
        type: choice
        description: The environment to deploy content to
        required: true
        options:
          - prod
  schedule:
    - cron: '54 13-16,20-21 * * 1-5'
    - cron: '45 18 * * 1-5'

concurrency:
  group: content-release-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment || 'prod' }}
  cancel-in-progress: ${{ github.event.inputs.deploy_environment != 'prod' }}

env:
  CMS_NOTIFICATIONS_SLACK: CJT90C0UT # cms-notifications
  VFS_PLATFORM_BUILDS_SLACK: C0MQ281DJ # vfs-platform-builds
  BROKEN_LINKS_SLACK: C030F5WV2TF # content-broken-links
  DSVA_SCHEDULE_ENABLED: true

jobs:
  start-runner:
    runs-on: [self-hosted, linux, x64]
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    env:
      INSTANCE_TYPE: c5.4xlarge

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get latest GHA Runner AMI ID # AMI images are rebuilt every 15 days, use the latest one
        run: |
          echo "RUNNER_AMI_ID=$(aws ec2 describe-images \
          --owners 008577686731 \
          --filters Name=state,Values=available \
          --filters Name=name,Values=packer-gha-runner-ubuntu2004* \
          --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
          --output text)" >> $GITHUB_ENV

      - name: Get Subnet with the most free IPs # We will run these in the dsva-vagov-utility-2x subnet, so filter for those
        run: |
          echo "SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=tag:Name,Values=dsva-vagov-utility-subnet-2*" \
          --query 'sort_by(Subnets,&AvailableIpAddressCount)[-1].SubnetId' \
          --output text)" >> $GITHUB_ENV

      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: department-of-veterans-affairs/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          ec2-image-id: ${{ env.RUNNER_AMI_ID }}
          ec2-instance-type: ${{ env.INSTANCE_TYPE }}
          subnet-id: ${{ env.SUBNET_ID }}
          security-group-id: sg-0e23b56be3798e3a1
          max_attempts: 3
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "dsva-vagov-vets-website-on-demand-runner"},
              {"Key": "project", "Value": "vagov"},
              {"Key": "office", "Value": "dsva"},
              {"Key": "application", "Value": "on-demand-gha-runner"},
              {"Key": "VAECID", "Value": "AWG20180517003"},
              {"Key": "environment", "Value": "utility"}
            ]

  set-env:
    name: Set Env Variables
    runs-on: [self-hosted, linux, x64]
    if: always() && needs.wait-for-current-workflow-to-complete.result == 'success'
    needs: wait-for-current-workflow-to-complete
    outputs:
      RELEASE_WAIT: ${{ env.RELEASE_WAIT }}
      REF: ${{ steps.get-latest-release.outputs.target_commitish }}
      BUILDTYPE: ${{ env.BUILDTYPE }}
      DEPLOY_BUCKET: ${{ env.DEPLOY_BUCKET }}
      DRUPAL_ADDRESS: ${{ env.DRUPAL_ADDRESS }}
      APPROX_WORKFLOW_START_TIME: ${{ steps.export-approx-workflow-start-time.outputs.APPROX_WORKFLOW_START_TIME }}

    steps:
      - name: Export approximate workflow start time
        id: export-approx-workflow-start-time
        run: echo ::set-output name=APPROX_WORKFLOW_START_TIME::$(date +"%s")

      - name: Cancel workflow due to DSVA schedule
        if: ${{ env.DSVA_SCHEDULE_ENABLED != 'true' }}
        uses: andymckay/cancel-action@0.2

      - name: Validate workflow_dispatch deploy_environment
        if: ${{ github.event_name == 'workflow_dispatch' && !contains(fromJson('["prod"]'), github.event.inputs.deploy_environment) }}
        run: echo "prod is the only supported environment" && exit 1

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ needs.set-env.outputs.REF }}

      - name: Get latest release
        id: get-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0

      - name: Get release wait time (scheduled release)
        if: ${{ github.event_name == 'schedule' }}
        run: echo "RELEASE_WAIT=0" >> $GITHUB_ENV

      - name: Get release wait time (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "RELEASE_WAIT=${{ github.event.inputs.release_wait }}" >> $GITHUB_ENV

      - name: Set environment details for vagovprod
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'prod') || github.event_name == 'schedule' }}
        run: |
          echo "BUILDTYPE=vagovprod" >> $GITHUB_ENV
          echo "DEPLOY_BUCKET=content.www.va.gov" >> $GITHUB_ENV
          echo "DRUPAL_ADDRESS=http://internal-dsva-vagov-prod-cms-2000800896.us-gov-west-1.elb.amazonaws.com" >> $GITHUB_ENV

  wait-for-current-workflow-to-complete:
    name: Wait for current workflow to complete
    runs-on: [self-hosted, linux, x64]
    if: |
      always() &&
      ((github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'prod') || github.event_name == 'schedule')

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: ~/.cache/yarn
          path: |
            ~/.cache/yarn
            node_modules

      - name: Wait for current workflow to complete
        run: node ./script/github-actions/wait-for-current-workflow-to-complete.js content-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-build-status:
    name: Validate Build Status
    runs-on: [self-hosted, linux, x64]
    if: always() && needs.set-env.result == 'success'
    needs: set-env

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: ~/.cache/yarn
          path: |
            ~/.cache/yarn
            node_modules

      - name: Validate build status
        run: node ./script/github-actions/validate-build-status.js ${{ needs.set-env.outputs.REF }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-start:
    name: Notify Start
    runs-on: [self-hosted, linux, x64]
    needs: set-env
    if: ${{ always() && needs.set-env.outputs.BUILDTYPE == 'vagovprod' }}

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Notify Slack
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        with:
          payload: '{"attachments": [{"color": "#2EB67D","blocks": [{"type": "section","text": {"type": "mrkdwn","text": "Stand by, content release for content-build coming up. <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"}}]}]}'
          channel_id: ${{ env.CMS_NOTIFICATIONS_SLACK }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build:
    name: Build
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs:
      [
        set-env,
        validate-build-status,
        start-runner,
        wait-for-current-workflow-to-complete,
      ]
    timeout-minutes: 30
    if: |
      always() &&
      needs.set-env.result == 'success' &&
      needs.validate-build-status.result == 'success' &&
      needs.start-runner.result == 'success' &&
      needs.wait-for-current-workflow-to-complete.result == 'success'

    defaults:
      run:
        working-directory: content-build
    outputs:
      vagovprod_buildtime: ${{ env.vagovprod_buildtime }}
      BUILD_START_TIME: ${{ steps.export-build-start-time.outputs.BUILD_START_TIME }}
      BUILD_END_TIME: ${{ steps.export-build-end-time.outputs.BUILD_END_TIME }}
      CONTENT_BUILD_START_TIME: ${{ steps.export-content-build-start-time.outputs.CONTENT_BUILD_START_TIME }}
      CONTENT_BUILD_END_TIME: ${{ steps.export-content-build-end.outputs.CONTENT_BUILD_END_TIME }}
      GQL_QUERY_DURATION: ${{ steps.export-gql-query-duration.outputs.GQL_QUERY_DURATION }}
      GQL_PAGE_COUNT: ${{ steps.export-gql-page-count.outputs.GQL_PAGE_COUNT }}

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem
      CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver

    steps:
      - name: Export build start time
        id: export-build-start-time
        run: echo ::set-output name=BUILD_START_TIME::$(date +"%s")
        working-directory: ${{ github.workspace }}

      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build
          ref: ${{ needs.set-env.outputs.REF }}

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            **/node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: cd content-build && yarn install --frozen-lockfile --prefer-offline
          max_attempts: 3
          timeout_minutes: 7
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Wait for the CMS to be ready
        uses: ./content-build/.github/workflows/wait-for-cms-ready

      - name: Export content build start time
        id: export-content-build-start-time
        run: echo ::set-output name=CONTENT_BUILD_START_TIME::$(date +"%s")
        working-directory: ${{ github.workspace }}

      - name: Get buildtime
        id: buildtime
        run: |
          BUILDTIME=$(date +%s)
          echo ::set-output name=buildtime::$BUILDTIME
          echo "${{ needs.set-env.outputs.BUILDTYPE }}_buildtime=$BUILDTIME" >> $GITHUB_ENV

      - name: Build
        run: yarn build --buildtype=${{ needs.set-env.outputs.BUILDTYPE }} --asset-source=local --drupal-address=${{ needs.set-env.outputs.DRUPAL_ADDRESS }} --pull-drupal --drupal-max-parallel-requests=15 --no-drupal-proxy --verbose | tee build-output.txt
        timeout-minutes: 30
        env:
          NODE_ENV: production

      - name: Export content build end time
        id: export-content-build-end
        run: echo ::set-output name=CONTENT_BUILD_END_TIME::$(date +"%s")
        working-directory: ${{ github.workspace }}

      - name: Export gql query duration
        id: export-gql-query-duration
        run: echo ::set-output name=GQL_QUERY_DURATION::$(cat build-output.txt | grep -oP 'queries in \d+s' | grep -oP '\d+')

      - name: Export gql page count
        id: export-gql-page-count
        run: echo ::set-output name=GQL_PAGE_COUNT::$(cat build-output.txt | grep -oP 'with \d+ pages' | grep -oP '\d+')

      - name: Check broken links
        id: get-broken-link-info
        run: node ./script/github-actions/check-broken-links.js ${{ needs.set-env.outputs.BUILDTYPE }}

      - name: Generate build details
        run: |
          cat > build/${{ needs.set-env.outputs.BUILDTYPE }}/BUILD.txt << EOF
          BUILDTYPE=${{ needs.set-env.outputs.BUILDTYPE }}
          NODE_ENV=production
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          CHANGE_TARGET=null
          RUN_ID=${{ github.run_id }}
          RUN_NUMBER=${{ github.run_number }}
          REF=${{ needs.set-env.outputs.REF }}
          BUILDTIME=${{ steps.buildtime.outputs.buildtime }}
          EOF

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ needs.set-env.outputs.BUILDTYPE }}

      - name: Compress build
        run: tar -C build/${{ needs.set-env.outputs.BUILDTYPE }} -cf ${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2 .

      - name: Persist prearchived build
        run: |
          mkdir -p /tmp/${{ github.run_id }}
          rm -rf /tmp/${{ github.run_id }}/${{ needs.set-env.outputs.BUILDTYPE }}
          mv ${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2 /tmp/${{ github.run_id }}

      # Only will get called if error in workflow
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload broken links file
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        run: aws s3 cp ./logs/${{ needs.set-env.outputs.BUILDTYPE }}-broken-links.json s3://vetsgov-website-builds-s3-upload/broken-link-reports/${{ needs.set-env.outputs.BUILDTYPE }}-broken-links.json --acl public-read --region us-gov-west-1

      - name: Notify VFS Platform Builds channel about broken links
        uses: slackapi/slack-github-action@v1.16.0
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}
        with:
          payload: ${{ steps.get-broken-link-info.outputs.SLACK_ATTACHMENTS }}
          channel-id: ${{ env.VFS_PLATFORM_BUILDS_SLACK }}

      - name: Notify content broken links channel about broken links
        uses: slackapi/slack-github-action@v1.16.0
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
          SLACK_BOT_TOKEN: ${{ env.SLACK_BOT_TOKEN }}
        with:
          payload: ${{ steps.get-broken-link-info.outputs.SLACK_ATTACHMENTS }}
          channel-id: ${{ env.BROKEN_LINKS_SLACK }}

      - name: Export build end time
        id: export-build-end-time
        run: echo ::set-output name=BUILD_END_TIME::$(date +"%s")
        working-directory: ${{ github.workspace }}

  archive:
    name: Archive
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: [set-env, build, start-runner]
    if: ${{ always() && needs.build.result == 'success' }}
    outputs:
      ARCHIVE_END_TIME: ${{ steps.export-archive-end-time.outputs.ARCHIVE_END_TIME }}

    steps:
      - name: Restore ${{ needs.set-env.outputs.BUILDTYPE }} build
        run: |
          mv /tmp/${{ github.run_id }}/${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2 .
          df -h
          du -h ${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload build
        run: aws s3 cp ${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/${{needs.set-env.outputs.REF}}/${{ needs.set-env.outputs.BUILDTYPE }}.tar.bz2 --acl public-read --region us-gov-west-1

      - name: Export archive end time
        id: export-archive-end-time
        run: echo ::set-output name=ARCHIVE_END_TIME::$(date +"%s")

  create-release:
    name: Create Release
    runs-on: [self-hosted, linux, x64]
    needs: [set-env, archive]
    if: ${{ always() && needs.archive.result == 'success' }}
    outputs:
      CREATE_RELEASE_END_TIME: ${{ steps.export-create-release-end-time.outputs.CREATE_RELEASE_END_TIME }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ needs.set-env.outputs.REF }}
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Get latest tag
        id: get-latest-tag
        run: echo ::set-output name=LATEST_TAG_VERSION::$(git fetch --all --tags > /dev/null && git tag -l | sort -V --reverse | head -n 1)

      - name: Waiting to release
        run: |
          echo "Waiting to release: https://github.com/${{github.repository}}/compare/${{steps.get-latest-tag.outputs.LATEST_TAG_VERSION}}...${{needs.set-env.outputs.REF}}"

      - name: Sleep for ${{ needs.set-env.outputs.RELEASE_WAIT }} minutes
        uses: whatnick/wait-action@master
        with:
          time: ${{ needs.set-env.outputs.RELEASE_WAIT }}m

      - name: Get next tag version
        run: |
          current_patch=$(echo ${{ steps.get-latest-tag.outputs.LATEST_TAG_VERSION }} | cut -d'.' -f3)
          echo "new_patch=$(echo $(( $current_patch + 1 )))" >> $GITHUB_ENV

      - name: Create tag
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 30
          max_attempts: 3
          command: git tag v0.0.${{ env.new_patch }} ${{ needs.set-env.outputs.REF }} && git push origin v0.0.${{ env.new_patch }}
          new_command_on_retry: |
            next_patch=$(echo $(( ${{ env.new_patch }} + 1 )))
            echo "new_patch=$next_patch" >> $GITHUB_ENV
            git tag v0.0.$next_patch ${{ needs.set-env.outputs.REF }} && git push origin v0.0.$next_patch

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
        with:
          tag_name: v0.0.${{ env.new_patch }}
          release_name: content-build/v0.0.${{ env.new_patch }}
          commitish: ${{ needs.set-env.outputs.REF }}

      - name: Export create-release end time
        id: export-create-release-end-time
        run: echo ::set-output name=CREATE_RELEASE_END_TIME::$(date +"%s")

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: [set-env, build, create-release]
    if: |
      always() &&
      needs.build.result == 'success' &&
      needs.create-release.result == 'success'
    outputs:
      DEPLOY_END_TIME: ${{ steps.export-deploy-end-time.outputs.DEPLOY_END_TIME }}

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_PROD_ROLE
          env_variable_name: AWS_FRONTEND_PROD_ROLE

      - name: Get Drupal token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /dsva-vagov/vets-website/prod/drupal-password
          env_variable_name: CALLBACK_TOKEN

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_PROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Deploy
        run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
        env:
          SRC: s3://vetsgov-website-builds-s3-upload/content-build/${{needs.set-env.outputs.REF}}/${{needs.set-env.outputs.BUILDTYPE}}.tar.bz2
          DEST: s3://${{ needs.set-env.outputs.DEPLOY_BUCKET }}

      - name: Wait for the CMS to be ready
        uses: ./.github/workflows/wait-for-cms-ready

      - name: CMS GovDelivery callback
        uses: fjogeleit/http-request-action@master
        with:
          url: https://prod.cms.va.gov/api/govdelivery_bulletins/queue?EndTime=${{ needs.build.outputs.vagovprod_buildtime }}&src=gha&runId=${{ github.run_id }}&runNumber=${{ github.run_number }}
          method: GET
          username: api
          password: ${{ env.CALLBACK_TOKEN }}
          timeout: 10000

      - name: Export deploy end time
        id: export-deploy-end-time
        run: echo ::set-output name=DEPLOY_END_TIME::$(date +"%s")

  notify-failure:
    name: Notify Failure
    runs-on: [self-hosted, linux, x64]
    if: |
      needs.set-env.outputs.BUILDTYPE == 'vagovprod' &&
      (failure() && needs.deploy.result != 'success')
    needs: [set-env, deploy]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Datadog token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /dsva-vagov/content-build/GHA_CONTENT_BUILD_DATADOG_API_KEY
          env_variable_name: GHA_CONTENT_BUILD_DATADOG_API_KEY

      - name: Build JSON object
        run: |
          jq --null-input '{}' | \
          jq '.title = "VA.gov CMS content release has failed"' | \
          jq '.text = "VA.gov Content release ${{github.run_id}} failed at \(now|strftime("%Y-%m-%d %H:%M:%S"))! https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"' | \
          jq '.date_happened = now' | \
          jq '.aggregation_key = "content release ${{github.run_id}}"' | \
          jq '.tags[0] = "project:vagov"' | \
          jq '.tags[1] = "repo:content-build"' | \
          jq '.tags[2] = "workflow:content-release"' | \
          jq '.tags[3] = "env:${{env.DEPLOY_ENV}}"' | \
          jq '.tags[5] = "status:${{needs.deploy.result}}"' | \
          jq '.tags[6] = "trigger:${{env.BUILD_TRIGGER}}"' | \
          jq '.alert_type = "error"' > event.json

      - name: Send event to Datadog
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
          -H "Content-Type: text/json" \
          -H "DD-API-KEY: ${{ env.GHA_CONTENT_BUILD_DATADOG_API_KEY }}" \
          -d @- < event.json

  stop-runner:
    name: Stop on-demand-runner
    needs: [archive, start-runner]
    runs-on: [self-hosted, linux, x64]
    if: ${{ always() }} # Even if an error happened, let's stop the runner
    env:
      INSTANCE_TYPE: c5.4xlarge

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Stop Runner
        uses: department-of-veterans-affairs/ec2-github-runner@main
        with:
          mode: stop
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  record-metrics:
    name: Record metrics in Datadog
    runs-on: [self-hosted, linux, x64]
    needs:
      - set-env
      - build
      - archive
      - create-release
      - deploy
    if: |
      always() &&
      needs.deploy.result == 'success'
    env:
      METRIC_NAMESPACE: dsva_vagov.content_build
    steps:
      - name: Get current timestamp
        run: echo "NOW=$(date +"%s")" >> $GITHUB_ENV

      - name: Set vars for scheduled runs
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          echo "BUILD_TRIGGER=scheduled" >> $GITHUB_ENV

      - name: Set vars for manual runs
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "DEPLOY_ENV=${{ github.event.inputs.deploy_environment }}" >> $GITHUB_ENV
          echo "BUILD_TRIGGER=manual" >> $GITHUB_ENV

      - name: Calculate durations
        run: |
          echo "SETUP_DURATION=$(expr ${{needs.build.outputs.BUILD_START_TIME}} - ${{needs.set-env.outputs.APPROX_WORKFLOW_START_TIME}})" >> $GITHUB_ENV
          echo "BUILD_DURATION=$(expr ${{needs.build.outputs.BUILD_END_TIME}} - ${{needs.build.outputs.BUILD_START_TIME}})" >> $GITHUB_ENV
          echo "CONTENT_BUILD_DURATION=$(expr ${{needs.build.outputs.CONTENT_BUILD_END_TIME}} - ${{needs.build.outputs.CONTENT_BUILD_START_TIME}})" >> $GITHUB_ENV
          echo "ARCHIVE_DURATION=$(expr ${{needs.archive.outputs.ARCHIVE_END_TIME}} - ${{needs.build.outputs.BUILD_END_TIME}})" >> $GITHUB_ENV
          echo "CREATE_RELEASE_DURATION=$(expr ${{needs.create-release.outputs.CREATE_RELEASE_END_TIME}} - ${{needs.archive.outputs.ARCHIVE_END_TIME}})" >> $GITHUB_ENV
          echo "DEPLOY_DURATION=$(expr ${{needs.deploy.outputs.DEPLOY_END_TIME}} - ${{needs.create-release.outputs.CREATE_RELEASE_END_TIME}})" >> $GITHUB_ENV
          echo "OVERALL_DURATION=$(expr ${{needs.deploy.outputs.DEPLOY_END_TIME}} - ${{needs.set-env.outputs.APPROX_WORKFLOW_START_TIME}})" >> $GITHUB_ENV

      - name: Build JSON object
        run: |
          jq --null-input '{}' | \
          jq '.series[0].metric = "${{env.METRIC_NAMESPACE}}.setup.duration"' | \
          jq '.series[0].points[0] = [${{env.NOW}}, ${{env.SETUP_DURATION}}]' | \
          jq '.series[1].metric = "${{env.METRIC_NAMESPACE}}.build.duration"' | \
          jq '.series[1].points[0] = [${{env.NOW}}, ${{env.BUILD_DURATION}}]' | \
          jq '.series[2].metric = "${{env.METRIC_NAMESPACE}}.build.gql.pages"' | \
          jq '.series[2].points[0] = [${{env.NOW}}, ${{needs.build.outputs.GQL_PAGE_COUNT}}]' | \
          jq '.series[3].metric = "${{env.METRIC_NAMESPACE}}.build.gql.duration"' | \
          jq '.series[3].points[0] = [${{env.NOW}}, ${{needs.build.outputs.GQL_QUERY_DURATION}}]' | \
          jq '.series[4].metric = "${{env.METRIC_NAMESPACE}}.build.content-build.duration"' | \
          jq '.series[4].points[0] = [${{env.NOW}}, ${{env.CONTENT_BUILD_DURATION}}]' | \
          jq '.series[5].metric = "${{env.METRIC_NAMESPACE}}.archive.duration"' | \
          jq '.series[5].points[0] = [${{env.NOW}}, ${{env.ARCHIVE_DURATION}}]' | \
          jq '.series[6].metric = "${{env.METRIC_NAMESPACE}}.create-release.duration"' | \
          jq '.series[6].points[0] = [${{env.NOW}}, ${{env.CREATE_RELEASE_DURATION}}]' | \
          jq '.series[7].metric = "${{env.METRIC_NAMESPACE}}.deploy.duration"' | \
          jq '.series[7].points[0] = [${{env.NOW}}, ${{env.DEPLOY_DURATION}}]' | \
          jq '.series[8].metric = "${{env.METRIC_NAMESPACE}}.overall.duration"' | \
          jq '.series[8].points[0] = [${{env.NOW}}, ${{env.OVERALL_DURATION}}]' | \
          jq '.series[].tags[0] = "env:${{env.DEPLOY_ENV}}"' | \
          jq '.series[].tags[1] = "build_number:${{github.run_number}}"' | \
          jq '.series[].tags[2] = "status:${{needs.deploy.result}}"' | \
          jq '.series[].tags[3] = "trigger:${{env.BUILD_TRIGGER}}"' > metrics.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Datadog token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@v1.2.1
        with:
          ssm_parameter: /dsva-vagov/content-build/GHA_CONTENT_BUILD_DATADOG_API_KEY
          env_variable_name: GHA_CONTENT_BUILD_DATADOG_API_KEY

      - name: Send metrics to Datadog
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/series" \
          -H "Content-Type: text/json" \
          -H "DD-API-KEY: ${{ env.GHA_CONTENT_BUILD_DATADOG_API_KEY }}" \
          -d @- < metrics.json
