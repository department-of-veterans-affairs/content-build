name: Daily Deploy

# TODO: Remove push
on:
  push:
  workflow_dispatch:
    inputs:
      use_latest_release:
        description: "use_latest_release (true/false - case sensitive!)"
        required: true
        default: 'true'
      release_wait:
        description: "Release Wait (minutes)"
        required: false
        default: 60
  schedule:
    - cron: "0 18 * * 1-5" # 1400 EST
    - cron: "0 13-16,19-21 * * 1-5" #0900-1200 EST,1500-1700EST

# TODO: Change to correct channel_id when ready
env:
  CHANNEL_ID: U01SPJ10WBC

jobs:
  job-env:
    name: Set env variables
    runs-on: ubuntu-latest
    outputs:
      LATEST_TAG_VERSION: ${{ steps.get-latest-tag.outputs.LATEST_TAG_VERSION }}
      RELEASE_WAIT: ${{ env.RELEASE_WAIT }}
      REF: ${{ env.REF }}
      CONTENT_ONLY: ${{ env.CONTENT_ONLY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-latest-tag
        run: echo ::set-output name=LATEST_TAG_VERSION::$(git fetch --all --tags > /dev/null && git tag -l | sort -V --reverse | head -n 1)

      - name: Get latest release
        id: get-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0

      - name: Check if content release only deploy
        run: |
          if [[ ${{ github.event.schedule == '0 13-16,19-21 * * 1-5' || github.event.inputs.use_latest_release == 'true'}} ]]
          then
            echo "CONTENT_ONLY=true" >> $GITHUB_ENV
          else
            echo "CONTENT_ONLY=false" >> $GITHUB_ENV
          fi

      - name: Get master ref (full production deploy or use_latest_release == false)
        if: ${{ !env.CONTENT_ONLY }}
        run: echo "REF=${{ github.sha }}" >> $GITHUB_ENV

      - name: Get latest release ref (content release only or use_latest_release == true)
        if: ${{ env.CONTENT_ONLY }}
        run: echo "REF=${{ steps.get-latest-release.outputs.target_commitish}}" >> $GITHUB_ENV

      # TODO: REMOVE
      - name: Get release wait time (test)
        if: ${{ github.event_name == 'push'}}
        run: echo "RELEASE_WAIT=10" >> $GITHUB_ENV

      - name: Get release wait time (full production deploy)
        if: ${{ github.event.schedule == '0 18 * * 1-5'}}
        run: echo "RELEASE_WAIT=60" >> $GITHUB_ENV

      - name: Get release wait time (content release)
        if: ${{ github.event.schedule == '0 13-16,19-21 * * 1-5'}}
        run: echo "RELEASE_WAIT=0" >> $GITHUB_ENV

      - name: Get release wait time (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "RELEASE_WAIT=${{ github.event.inputs.release_wait }}" >> $GITHUB_ENV

  check-runs:
    name: Check runs status
    runs-on: ubuntu-latest
    needs: job-env

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Validate build status
        run: node ./script/github-actions/check-build-status.js ${{ needs.job-env.outputs.REF }}

  slack-notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [job-env, check-runs]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN
          
      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout VSP actions
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vsp-github-actions
          ref: refs/heads/main
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/vsp-github-actions

      - name: Generate slack message
        id: get-slack-message
        run: |
          if [[ ${{ needs.job-env.outputs.CONTENT_ONLY }} ]]
          then
            echo ::set-output name=SLACK_MESSAGE::"Stand by, content release for content-build coming up. <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"
          else
            echo ::set-output name=SLACK_MESSAGE::"Stand by, production deploy for content-build coming up in ${{ needs.job-env.outputs.RELEASE_WAIT }} minutes. View what coming here: <https://github.com/${{github.repository}}/compare/content-build/${{needs.job-env.outputs.LATEST_TAG_VERSION}}...${{needs.job-env.outputs.REF}}>"
          fi

      - name: Daily deploy succeess
        uses: ./.github/actions/vsp-github-actions/slack-socket
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: '[{"mrkdwn_in": ["text"], "color": "good", "text": "${{ steps.get-slack-message.outputs.SLACK_MESSAGE }}"}]'
          channel_id: ${{ env.CHANNEL_ID }}
  
  build:
    name: Build
    runs-on: self-hosted
    needs: [job-env, check-runs, slack-notify]
    defaults:
      run:
        working-directory: content-build

    # TODO: Change to prod when ready
    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem
      BUILDTYPE: vagovprod
      DRUPAL_ADDRESS: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
      CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Build
        run: yarn build --buildtype=${{ env.BUILDTYPE }} --drupal-address="${{ env.DRUPAL_ADDRESS }}" --no-drupal-proxy
        timeout-minutes: 30
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        run: node ./script/github-actions/check-broken-links.js {{ env.BUILDTYPE }}

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ needs.job-env.outputs.REF }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ env.BUILDTYPE }}

      - name: Compress prearchived ${{ env.BUILDTYPE }} build
        run: tar -jcvf ${{ env.BUILDTYPE }}.tar.bz2 build/${{ env.BUILDTYPE }}

      - name: Upload artifact ${{ env.BUILDTYPE }} build for archive
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILDTYPE }}.tar.bz2
          path: content-build/${{ env.BUILDTYPE }}.tar.bz2
          retention-days: 1

  archive:
    name: Archive
    runs-on: ubuntu-latest
    needs: [job-env, build]

    env:
      BUILDTYPE: vagovprod

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BUILDTYPE }}.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      # TODO: Uncomment when ready, need to point to dev?
      # - name: Upload build
      #   run: aws s3 cp ${{ env.BUILDTYPE }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/${{needs.job-env.outputs.REF}}/${{env.BUILDTYPE}}.tar.bz2 --acl public-read --region us-gov-west-1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [job-env, build, archive]

    steps:
      - name: Waiting to release 
        run: |
          echo "Waiting to release: https://github.com/${{github.repository}}/compare/${{needs.job-env.outputs.LATEST_TAG_VERSION}}...${{needs.job-env.outputs.REF}}"

      - name: Sleep for ${{ needs.job-env.outputs.RELEASE_WAIT }}
        uses: whatnick/wait-action@master
        with:
          time: '${{ needs.job-env.outputs.RELEASE_WAIT }}m'

      - name: Get next tag version
        id: bump-tag-version
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ needs.job-env.outputs.LATEST_TAG_VERSION }}

      - name: Echo next version
        run: echo "${{ steps.bump-tag-version.outputs.v_patch }}"

      # TODO: Uncomment when ready, need to point to dev?
      # - name: Tag release
      #   run: git tag ${{ steps.bump-tag-version.outputs.v_patch }} ${{ needs.job-env.outputs.REF }} && git push origin ${{ steps.bump-tag-version.outputs.v_patch }} 

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: create-release

    env:
      ENVIRONMENT: vagovprod
      BUCKET: content.www.va.gov

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      # TODO: Uncomment when ready, need to point to dev?
      # - name: Deploy
      #   run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
      #   env:
      #     SRC: s3://vetsgov-website-builds-s3-upload/content-build/${{needs.job-env.outputs.REF}}/${{env.ENVIRONMENT}}.tar.bz2
      #     DEST: s3://${{ env.BUCKET }}

  on-failure:
    name: On Failure
    runs-on: ubuntu-latest
    if: ${{ failure() || cancelled() }}
    needs: [job-env, deploy]

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-gov-west-1

    - name: Get Slack app token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/github_actions_slack_socket_token
        env_variable_name: SLACK_APP_TOKEN

    - name: Get Slack bot token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/github_actions_slack_bot_user_token
        env_variable_name: SLACK_BOT_TOKEN
        
    - name: Get va-vsp-bot token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
        env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

    - name: Checkout VSP actions
      uses: actions/checkout@v2
      with:
        repository: department-of-veterans-affairs/vsp-github-actions
        ref: refs/heads/main
        token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
        persist-credentials: false
        path: ./.github/actions/vsp-github-actions

    - name: Generate slack message
      id: get-slack-message
      run: |
        if [[ ${{ needs.job-env.outputs.CONTENT_ONLY }} ]]
        then
          echo ::set-output name=SLACK_MESSAGE::"<!here> Content release for content-build has failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"
        else
          echo ::set-output name=SLACK_MESSAGE::"<!here> Production deploy for content-build has failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"
        fi

    - name: Daily deploy failed
      if: ${{ always() }}
      uses: ./.github/actions/vsp-github-actions/slack-socket
      with:
        slack_app_token: ${{ env.SLACK_APP_TOKEN }}
        slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
        attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "${{ steps.get-slack-message.outputs.SLACK_MESSAGE }}"}]'
        channel_id: ${{ env.CHANNEL_ID }}
