name: Daily Deploy

# TODO: Remove and uncomment
on:
  push:
  workflow_dispatch:
    inputs:
      release_wait:
        description: "Release Wait (minutes)"
        required: false
        default: 60
      use_latest_release:
        description: "use_latest_release (true/false)"
        required: false
        default: false
  # schedule:
  #   - cron: "0 18 * * 1-5"

# TODO: Change to correct channel_id when ready
env:
  CHANNEL_ID: U01SPJ10WBC
  RELEASE_WAIT: 60

jobs:
  check-runs:
    name: Check runs status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Validate build status
        run: node ./script/github-actions/check-build-status.js ${{ github.sha }}

  slack-notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [check-runs]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN
          
      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout VSP actions
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vsp-github-actions
          ref: refs/heads/main
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/vsp-github-actions
      
      - name: Get the version
        id: fetch-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0

      # TODO: Verify tag version is correct one
      - name: Daily deploy succeess
        uses: ./.github/actions/vsp-github-actions/slack-socket
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: '[{"mrkdwn_in": ["text"], "color": "good", "text": "Stand by, production deploy for content-build coming up in 60 minutes. View what coming here: <https://github.com/${{github.repository}}/compare/content-build/${{steps.fetch-latest-release.outputs.tag_name}}...${{github.sha}}>"}]'
          channel_id: ${{ env.CHANNEL_ID }}

  # prerelease:
  #   name: Prelease Job
  #   runs-on: ubuntu-latest
  #   needs: [check-runs, slack-notify]

  wait-to-release:
    name: Wait to release
    runs-on: ubuntu-latest
    # needs: [prerelease]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest release
        id: get-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0

      # TODO: Do we need massive depth and do we need to fetch all?
      - name: Get latest tag
        id: get-latest-tag
        run: echo ::set-output name=TAG_VERSION::$(git fetch --all --tags > /dev/null && git tag -l | sort -V --reverse | head -n 1 | cut -c2-)

      - name: Waiting to release 
        run: |
          echo "Waiting to release: https://github.com/${{github.repository}}/compare/${{steps.get-latest-release.outputs.tag_name}}...${{github.sha}}"
      
      # TODO: Uncomment
      # - name: Sleep for ${{ github.event.inputs.release_wait }} (default)
      #   if: ${{ github.event.inputs.release_wait == '' }}
      #   uses: whatnick/wait-action@master
      #   with:
      #     time: '${{ env.RELEASE_WAIT }}m'

      # - name: Sleep for ${{ github.event.inputs.release_wait }} (workflow_dispatch)
      #   if: ${{ github.event.inputs.release_wait != '' }}
      #   uses: whatnick/wait-action@master
      #   with:
      #     time: '${{ github.event.inputs.release_wait }}m'

      - name: Get next tag version
        id: bump-tag-version
        run: |
          echo ::set-output name=PATCH::$((${{ steps.get-latest-tag.outputs.TAG_VERSION }} + 0.0.1))

      - name: Echo tag version
        run: |
          echo ${{ steps.bump-tag-version.outputs.PATCH }}

      # - name: Tag release
      #   run: |
      #     git tag ${{ stuff }} && git push origin ${{ stuff }} 

  release:
    name: Release then trigger deploy
    runs-on: ubuntu-latest
    needs: [wait-to-release]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

  on-failure:
    name: On Failure
    runs-on: ubuntu-latest
    if: ${{ failure() || cancelled() }}
    needs: [check-runs, slack-notify, wait-to-release, release]

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-gov-west-1

    - name: Get Slack app token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/github_actions_slack_socket_token
        env_variable_name: SLACK_APP_TOKEN

    - name: Get Slack bot token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/github_actions_slack_bot_user_token
        env_variable_name: SLACK_BOT_TOKEN
        
    - name: Get va-vsp-bot token
      uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
      with:
        ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
        env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

    - name: Checkout VSP actions
      uses: actions/checkout@v2
      with:
        repository: department-of-veterans-affairs/vsp-github-actions
        ref: refs/heads/main
        token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
        persist-credentials: false
        path: ./.github/actions/vsp-github-actions

    # TODO: Need to do for content-release
    - name: Daily deploy failed
      uses: ./.github/actions/vsp-github-actions/slack-socket
      with:
        slack_app_token: ${{ env.SLACK_APP_TOKEN }}
        slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
        attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "<!here> Production deploy for content-build has failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
        channel_id: ${{ env.CHANNEL_ID }}
