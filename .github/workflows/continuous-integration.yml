name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

# TODO: Change to correct channel_id when ready
env:
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver
  CHANNEL_ID: C024DUC9S1K # -test-tim-accessibility-gha

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha  }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  start-runner:
    runs-on: ubuntu-latest
    outputs:
      vagovdev: ${{ steps.start-ec2-runner-name.outputs.vagovdev }}
      vagovstaging: ${{ steps.start-ec2-runner-name.outputs.vagovstaging }}
      vagovprod: ${{ steps.start-ec2-runner-name.outputs.vagovprod }}
      vagovdev-id: ${{ steps.start-ec2-runner-id.outputs.vagovdev }}
      vagovstaging-id: ${{ steps.start-ec2-runner-id.outputs.vagovstaging }}
      vagovprod-id: ${{ steps.start-ec2-runner-id.outputs.vagovprod }}
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store 
        uses: marvinpinto/action-inject-ssm-secrets@latest 
        with: 
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN  

      - name: Get latest GHA Runner AMI ID # AMI images are rebuilt every 15 days, use the latest one
        run: |
          echo "RUNNER_AMI_ID=$(aws ec2 describe-images \
          --owners 008577686731 \
          --filters Name=state,Values=available \
          --filters Name=name,Values=packer-gha-runner-ubuntu2004* \
          --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
          --output text)" >> $GITHUB_ENV

      - name: Get Subnet with the most free IPs # We will run these in the dsva-vagov-utility-2x subnet, so filter for those
        run: |
          echo "SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=tag:Name,Values=dsva-vagov-utility-subnet-2*" \
          --query 'sort_by(Subnets,&AvailableIpAddressCount)[-1].SubnetId' \
          --output text)" >> $GITHUB_ENV

      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          ec2-image-id: ${{ env.RUNNER_AMI_ID }}
          ec2-instance-type: ${{ env.INSTANCE_TYPE }}
          subnet-id: ${{ env.SUBNET_ID }}
          security-group-id: sg-0e23b56be3798e3a1
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "dsva-vagov-vets-website-on-demand-runner"},
              {"Key": "project", "Value": "vagov"},
              {"Key": "office", "Value": "dsva"},
              {"Key": "application", "Value": "on-demand-gha-runner"},
              {"Key": "VAECID", "Value": "AWG20180517003"},
              {"Key": "environment", "Value": "utility"}
            ]

      - name: EC2 Runner Name
        id: start-ec2-runner-name
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.label }}

      - name: EC2 Runner ID
        id: start-ec2-runner-id
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

  build:
    name: Build
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs[matrix.buildtype]}}
    timeout-minutes: 60

    defaults:
      run:
        working-directory: content-build

    env:
      # Sandbox Drupal address is used on branches other than master.
      DRUPAL_ADDRESS: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]
        include:
          - buildtype: vagovdev
            drupal-address: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
          - buildtype: vagovstaging
            drupal-address: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
          - buildtype: vagovprod
            drupal-address: http://internal-dsva-vagov-prod-cms-2000800896.us-gov-west-1.elb.amazonaws.com

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --network-concurrency 1
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Set Drupal address
        if: ${{ github.ref == 'refs/heads/master' }}
        run: echo "DRUPAL_ADDRESS=${{ matrix.drupal-address }}" >> $GITHUB_ENV

      - name: Build
        run: yarn build --buildtype=${{ matrix.buildtype }} --asset-source=local --drupal-address=${{ env.DRUPAL_ADDRESS }} --pull-drupal --drupal-max-parallel-requests=15 --no-drupal-proxy --verbose
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: node ./script/github-actions/check-broken-links.js ${{ matrix.buildtype }}

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Persist E2E test build
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: |
          mkdir -p /tmp/${{ github.run_id }}/test-build
          rm -rf /tmp/${{ github.run_id }}/test-build/vagovprod
          cp -R build/vagovprod /tmp/${{ github.run_id }}/test-build

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ matrix.buildtype }}

      - name: Persist prearchived build
        run: |
          mkdir -p /tmp/${{ github.run_id }}
          rm -rf /tmp/${{ github.run_id }}/${{ matrix.buildtype }}
          mv build/${{ matrix.buildtype }} /tmp/${{ github.run_id }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Checkout VSP actions
        uses: actions/checkout@v2
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          repository: department-of-veterans-affairs/vsp-github-actions
          ref: refs/heads/main
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/vsp-github-actions

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload broken links file
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        run: aws s3 cp ./logs/${{ matrix.buildtype }}-broken-links.json s3://vetsgov-website-builds-s3-upload/broken-link-reports/${{ matrix.buildtype }}-broken-links.json --acl public-read --region us-gov-west-1

      - name: Notify Slack about broken links
        uses: ./.github/actions/vsp-github-actions/slack-socket
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: ${{ steps.get-broken-link-info.outputs.SLACK_ATTACHMENTS }}
          blocks: ${{ steps.get-broken-link-info.outputs.SLACK_BLOCKS }}
          channel_id: ${{ env.CHANNEL_ID}}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.0
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx  --format ./script/github-actions/eslint-annotation-format.js .

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  drupal-cache-test:
    name: Drupal Cache Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Fetch Drupal cache
        run: yarn fetch-drupal-cache

  cypress-tests:
    name: Cypress E2E Tests
    runs-on: ${{ needs.start-runner.outputs.vagovprod }}
    needs: [start-runner, build]
    timeout-minutes: 30

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    steps:
      - name: Checkout content-build
        uses: actions/checkout@v2

      - name: Restore vagovprod build
        run: |
          mkdir -p build
          cp -R /tmp/${{ github.run_id }}/test-build/vagovprod build/vagovprod
          du -h build/vagovprod

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=3002 &

      - name: Run Cypress tests
        run: yarn cy:run --reporter cypress-multi-reporters --reporter-options "configFile=config/cypress-reporters.json"

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.2
        with:
          check_name: 'Cypress Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/e2e-test-output-*.xml'

      - name: Archive Cypress test videos
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-video-artifacts
          path: cypress/videos

      - name: Archive Cypress test screenshots
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-screenshot-artifacts
          path: cypress/screenshots

  nightwatch-tests:
    name: Nightwatch E2E Tests
    runs-on: ${{ needs.start-runner.outputs.vagovprod }}
    needs: [start-runner, build]
    timeout-minutes: 30
    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem
      
    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2

      - name: Restore vagovprod build
        run: |
          mkdir -p build
          cp -R /tmp/${{ github.run_id }}/test-build/vagovprod build/vagovprod
          du -h build/vagovprod

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=3002 &

      - name: Run Nightwatch tests
        run: yarn test:e2e
        env:
          BUILDTYPE: vagovprod

# archive:
#   name: Archive
#   runs-on: ubuntu-latest
#   needs: [cypress-tests, nightwatch-tests, unit-tests, linting, security-audit, drupal-cache-test]

#   strategy:
#     fail-fast: true
#     matrix:
#       buildtype: [vagovdev, vagovstaging, vagovprod]

#   steps:
#     - name: Download build artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ${{ matrix.buildtype }}.tar.bz2

#     - name: Configure AWS credentials (1)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get role from Parameter Store
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
#         env_variable_name: AWS_FRONTEND_NONPROD_ROLE

#     - name: Configure AWS Credentials (2)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1
#         role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
#         role-duration-seconds: 900
#         role-session-name: vsp-frontendteam-githubaction

#     - name: Upload build
#       run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1

# deploy:
#   name: Deploy
#   runs-on: ubuntu-latest
#   if: ${{ github.ref == 'refs/heads/master' }}
#   needs: archive

#   strategy:
#     matrix:
#       environment: [vagovdev, vagovstaging]
#       include:
#         - environment: vagovdev
#           bucket: content.dev.va.gov
#         - environment: vagovstaging
#           bucket: content.staging.va.gov

#   steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials (1)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get role from Parameter Store
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
#         env_variable_name: AWS_FRONTEND_NONPROD_ROLE

#     - name: Configure AWS Credentials (2)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1
#         role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
#         role-duration-seconds: 900
#         role-session-name: vsp-frontendteam-githubaction

#     - name: Deploy
#       run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
#       env:
#         SRC: s3://vetsgov-website-builds-s3-upload/content-build/${{ github.sha }}/${{ matrix.environment }}.tar.bz2
#         DEST: s3://${{ matrix.bucket }}

  stop-runner:
    name: Stop on-demand-runner
    needs: [start-runner, cypress-tests, nightwatch-tests]
    runs-on: ubuntu-latest
    if: ${{ always() }} # Even if an error happened, let's stop the runner
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]
        include:
          - buildtype: vagovdev
            id: vagovdev-id
          - buildtype: vagovstaging
            id: vagovstaging-id
          - buildtype: vagovprod
            id: vagovprod-id

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store 
        uses: marvinpinto/action-inject-ssm-secrets@latest 
        with: 
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN 

      - name: Stop Runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          label: ${{ needs.start-runner.outputs[matrix.buildtype]}}
          ec2-instance-id: ${{ needs.start-runner.outputs[matrix.id]}}
