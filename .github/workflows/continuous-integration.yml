name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

# TODO: Change to correct channel_id when ready
env:
  CHANNEL_ID: C024DUC9S1K # -test-tim-accessibility-gha

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha  }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 60

    defaults:
      run:
        working-directory: content-build

    env:
      # Sandbox Drupal address is used on branches other than master.
      # DRUPAL_ADDRESS: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]
        include:
          - buildtype: vagovdev
          - buildtype: vagovstaging
          - buildtype: vagovprod

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Fetch Drupal cache
        run: yarn fetch-drupal-cache

      - name: Build
        run: yarn build --buildtype=${{ matrix.buildtype }}
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: node ./script/github-actions/check-broken-links.js ${{ matrix.buildtype }}

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          RUN_ID=${{ github.run_id }}
          REF=${{ github.sha }}
          BUILDTIME=$(date +%s)
          EOF

      - name: Compress E2E test build
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: tar -C build/vagovprod -cjf test-build.tar.bz2 .

      - name: Upload E2E test build artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.buildtype == 'vagovprod' }}
        with:
          name: test-build.tar.bz2
          path: content-build/test-build.tar.bz2
          retention-days: 1

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ matrix.buildtype }}

      - name: Compress prearchived build
        run: tar -C build/${{ matrix.buildtype }} -cjf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Upload prearchived build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.buildtype }}.tar.bz2
          path: content-build/${{ matrix.buildtype }}.tar.bz2
          retention-days: 1

# archive:
#   name: Archive
#   runs-on: ubuntu-latest
#   needs: [cypress-tests, nightwatch-tests, unit-tests, linting, security-audit, drupal-cache-test]

#   strategy:
#     fail-fast: true
#     matrix:
#       buildtype: [vagovdev, vagovstaging, vagovprod]

#   steps:
#     - name: Download build artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ${{ matrix.buildtype }}.tar.bz2

#     - name: Configure AWS credentials (1)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1

#     - name: Get role from Parameter Store
#       uses: marvinpinto/action-inject-ssm-secrets@latest
#       with:
#         ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
#         env_variable_name: AWS_FRONTEND_NONPROD_ROLE

#     - name: Configure AWS Credentials (2)
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-gov-west-1
#         role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
#         role-duration-seconds: 900
#         role-session-name: vsp-frontendteam-githubaction

#     - name: Upload build
#       run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/$GITHUB_SHA/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1