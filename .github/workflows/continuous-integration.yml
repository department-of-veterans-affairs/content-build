name: Continuous Integration

on: [push]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.0
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx  --format ./script/github-actions/eslint-annotation-format.js .

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  drupal-cache-test:
    name: Drupal Cache Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Fetch Drupal cache
        run: yarn fetch-drupal-cache

  build:
    name: Build
    runs-on: self-hosted
    defaults:
      run:
        working-directory: content-build

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        # buildtype: [vagovdev, vagovstaging, vagovprod]
        buildtype: [vagovdev]

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn
          NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt

      - name: Build
        run: yarn build --buildtype=${{ matrix.buildtype }} --drupal-address="https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov" --no-drupal-proxy
        timeout-minutes: 30
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        run: node ./script/github-actions/check-broken-links.js ${{ matrix.buildtype }}

      - name: Compress ${{ matrix.buildtype }} build
        if: ${{ success() }}
        run: tar -zcvf ${{ matrix.buildType }}.tar.gz build

      - name: Upload build
        uses: actions/upload-artifact@v2
        if: ${{ success() }}
        with:
          name: ${{ matrix.buildtype }}
          path: ${{ matrix.buildType }}.tar.gz
          retention-days: 1

  prearchive:
    name: Prearchive Optimizations
    runs-on: self-hosted
    needs: [unit-tests, linting, drupal-cache-test, build]
    defaults:
      run:
        working-directory: content-build

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      matrix:
        # buildtype: [vagovdev, vagovstaging, vagovprod]
        buildtype: [vagovdev]

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_CACHE_FOLDER: ~/.cache/yarn

      - name: Download build artifactory
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.buildtype }}
          path: content-build/

      - name: ls ws/cb
        run: ls -al ${{ github.workspace }}/content-build

      - name: ls ws
        run: ls -al ${{ github.workspace }}

      - name: ls .
        run: ls -al .

      - name: ls ws/v
        run: ls -al ${{ github.workspace }}/${{ matrix.buildtype }}

      - name: pwd .
        run: pwd

      - name: Extract ${{ matrix.buildtype }} build in .
        run: tar -zxvf ${{ matrix.buildType }}.tar.gz

      # - name: Extract ${{ matrix.buildtype }} build in ws
      #   run: tar -xvf ${{ github.workspace }}/${{ matrix.buildType }}.tar.gz

      # - name: extract verbose
      #   run: tar -xvf ${{ github.workspace }}/content-build/${{ matrix.buildType }}.tar.gz

      - name: ls ws
        run: ls -al ${{ github.workspace }}

      - name: ls ws/v
        run: ls -al ${{ github.workspace }}/${{ matrix.buildtype }}

      - name: pwd .
        run: pwd

      - name: ls .
        run: ls -al .

      - name: ls b
        run: ls build

      - name: ls ws/cb
        run: ls ${{ github.workspace }}/content-build

      - name: ls ws/cb/b
        run: ls ${{ github.workspace }}/content-build/build

      - name: ls ws/cb/b/m
        run: ls ${{ github.workspace }}/content-build/build/${{ matrix.buildType }}

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ matrix.buildtype }}
