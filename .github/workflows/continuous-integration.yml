name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

env:
  CHROMEDRIVER_FILEPATH: /usr/local/share/chrome_driver/chromedriver
  DEVOPS_CHANNEL_ID: C37M86Y8G #devops-deploys
  PLATFORM_BUILD_CHANNEL_ID: C0MQ281DJ #vfs-platform-support

concurrency:
  group: ${{ github.ref != 'refs/heads/master' && github.ref || github.sha }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  start-runner:
    runs-on: ubuntu-latest
    outputs:
      vagovdev: ${{ steps.start-ec2-runner-name.outputs.vagovdev }}
      vagovstaging: ${{ steps.start-ec2-runner-name.outputs.vagovstaging }}
      vagovprod: ${{ steps.start-ec2-runner-name.outputs.vagovprod }}
      vagovdev-id: ${{ steps.start-ec2-runner-id.outputs.vagovdev }}
      vagovstaging-id: ${{ steps.start-ec2-runner-id.outputs.vagovstaging }}
      vagovprod-id: ${{ steps.start-ec2-runner-id.outputs.vagovprod }}
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get latest GHA Runner AMI ID # AMI images are rebuilt every 15 days, use the latest one
        run: |
          echo "RUNNER_AMI_ID=$(aws ec2 describe-images \
          --owners 008577686731 \
          --filters Name=state,Values=available \
          --filters Name=name,Values=packer-gha-runner-ubuntu2004* \
          --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
          --output text)" >> $GITHUB_ENV

      - name: Get Subnet with the most free IPs # We will run these in the dsva-vagov-utility-2x subnet, so filter for those
        run: |
          echo "SUBNET_ID=$(aws ec2 describe-subnets \
          --filters "Name=tag:Name,Values=dsva-vagov-utility-subnet-2*" \
          --query 'sort_by(Subnets,&AvailableIpAddressCount)[-1].SubnetId' \
          --output text)" >> $GITHUB_ENV

      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          ec2-image-id: ${{ env.RUNNER_AMI_ID }}
          ec2-instance-type: ${{ env.INSTANCE_TYPE }}
          subnet-id: ${{ env.SUBNET_ID }}
          security-group-id: sg-0e23b56be3798e3a1
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "dsva-vagov-vets-website-on-demand-runner"},
              {"Key": "project", "Value": "vagov"},
              {"Key": "office", "Value": "dsva"},
              {"Key": "application", "Value": "on-demand-gha-runner"},
              {"Key": "VAECID", "Value": "AWG20180517003"},
              {"Key": "environment", "Value": "utility"}
            ]

      - name: EC2 Runner Name
        id: start-ec2-runner-name
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.label }}

      - name: EC2 Runner ID
        id: start-ec2-runner-id
        run: echo ::set-output name=${{ matrix.buildtype }}::${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

  build:
    name: Build
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs[matrix.buildtype] }}
    timeout-minutes: 60

    defaults:
      run:
        working-directory: content-build

    outputs:
      vagovdev_buildtime: ${{ env.vagovdev_buildtime }}
      vagovstaging_buildtime: ${{ env.vagovstaging_buildtime }}

    env:
      # Sandbox Drupal address is used on branches other than master.
      DRUPAL_ADDRESS: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]
        include:
          - buildtype: vagovdev
            drupal-address: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
          - buildtype: vagovstaging
            drupal-address: https://cms-vets-website-branch-builds-lo9uhqj18nwixunsjadvjsynuni7kk1u.ci.cms.va.gov
          - buildtype: vagovprod
            drupal-address: http://internal-dsva-vagov-prod-cms-2000800896.us-gov-west-1.elb.amazonaws.com

    steps:
      - name: Checkout vagov-content
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/vagov-content
          path: vagov-content

      - name: Checkout content-build
        uses: actions/checkout@v2
        with:
          path: content-build

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .cache/yarn
            **/node_modules
          key: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ steps.get-node-version.outputs.NODE_VERSION }}-on-demand-runner-

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          command: cd content-build && yarn install --frozen-lockfile --prefer-offline
          max_attempts: 3
          timeout_minutes: 7
        env:
          YARN_CACHE_FOLDER: .cache/yarn

      - name: Set Drupal address
        if: ${{ github.ref == 'refs/heads/master' }}
        run: echo "DRUPAL_ADDRESS=${{ matrix.drupal-address }}" >> $GITHUB_ENV

      - name: Build
        run: yarn build --buildtype=${{ matrix.buildtype }} --asset-source=local --drupal-address=${{ env.DRUPAL_ADDRESS }} --pull-drupal --drupal-max-parallel-requests=15 --no-drupal-proxy --verbose
        env:
          NODE_ENV: production

      - name: Check broken links
        id: get-broken-link-info
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: node ./script/github-actions/check-broken-links.js ${{ matrix.buildtype }}

      - name: Get buildtime
        id: buildtime
        run: |
          BUILDTIME=$(date +%s)
          echo ::set-output name=buildtime::$BUILDTIME
          echo "${{ matrix.buildtype }}_buildtime=$BUILDTIME" >> $GITHUB_ENV

      - name: Generate build details
        run: |
          cat > build/${{ matrix.buildtype }}/BUILD.txt << EOF
          BUILDTYPE=${{ matrix.buildtype }}
          NODE_ENV=production
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          CHANGE_TARGET=null
          RUN_ID=${{ github.run_id }}
          RUN_NUMBER=${{ github.run_number }}
          REF=${{ github.sha }}
          BUILDTIME=${{ steps.buildtime.outputs.buildtime }}
          EOF

      - name: Persist E2E test build
        if: ${{ matrix.buildtype == 'vagovprod' }}
        run: |
          mkdir -p /tmp/${{ github.run_id }}/test-build
          rm -rf /tmp/${{ github.run_id }}/test-build/vagovprod
          cp -R build/vagovprod /tmp/${{ github.run_id }}/test-build

      - name: Prearchive
        run: node ./script/prearchive.js --buildtype=${{ matrix.buildtype }}

      - name: Compress build
        run: tar -C build/${{ matrix.buildtype }} -cf ${{ matrix.buildtype }}.tar.bz2 .

      - name: Persist compressed build and drupal cache
        run: |
          mkdir -p /tmp/${{ github.run_id }}
          rm -rf /tmp/${{ github.run_id }}/${{ matrix.buildtype }}
          mv ${{ matrix.buildtype }}.tar.bz2 /tmp/${{ github.run_id }}
          mv .cache /tmp/${{ github.run_id }}

      # Only will get called if error in workflow
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get Slack app token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_socket_token
          env_variable_name: SLACK_APP_TOKEN

      - name: Get Slack bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /devops/github_actions_slack_bot_user_token
          env_variable_name: SLACK_BOT_TOKEN

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload broken links file
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        run: aws s3 cp ./logs/${{ matrix.buildtype }}-broken-links.json s3://vetsgov-website-builds-s3-upload/broken-link-reports/${{ matrix.buildtype }}-broken-links.json --acl public-read --region us-gov-west-1

      - name: Notify Slack about broken links
        uses: department-of-veterans-affairs/vsp-github-actions/slack-socket@v1.1.0
        if: ${{ steps.get-broken-link-info.outputs.UPLOAD_AND_NOTIFY == '1' && always() }}
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          slack_app_token: ${{ env.SLACK_APP_TOKEN }}
          slack_bot_token: ${{ env.SLACK_BOT_TOKEN }}
          attachments: ${{ steps.get-broken-link-info.outputs.SLACK_ATTACHMENTS }}
          channel_id: ${{ env.PLATFORM_BUILD_CHANNEL_ID }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Create test results folder
        run: mkdir -p test-results

      - name: Run unit tests
        run: yarn test:unit --coverage
        env:
          MOCHA_FILE: test-results/unit-tests.xml

      - name: Generate coverage report by app
        run: node script/app-coverage-report.js > test-results/coverage_report.txt

      - name: Get code coverage
        id: code-coverage
        run: echo ::set-output name=MARKDOWN::$(node ./script/github-actions/code-coverage-format-report.js)

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.0
        with:
          check_name: 'Unit Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/unit-tests.xml'
          summary: ${{ steps.code-coverage.outputs.MARKDOWN }}

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Annotate ESLint results
        run: yarn run eslint --ext .js --ext .jsx  --format ./script/github-actions/eslint-annotation-format.js .

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Node version
        id: get-node-version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get-node-version.outputs.NODE_VERSION }}

      - name: Audit dependencies
        run: yarn security-check

  drupal-cache-test:
    name: Drupal Cache Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Fetch Drupal cache
        run: yarn fetch-drupal-cache

  cypress-tests:
    name: Cypress E2E Tests
    runs-on: ${{ needs.start-runner.outputs.vagovprod }}
    needs: [start-runner, build]
    timeout-minutes: 30
    container:
      image: public.ecr.aws/cypress-io/cypress/browsers:node14.16.0-chrome90-ff88
      options: -u 0
      volumes:
        - /usr/local/share:/share
        - /tmp:/tmp
        - /etc/ssl/certs

    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.pem
      CHROMEDRIVER_FILEPATH: /share/chrome_driver/chromedriver

    steps:
      - name: Checkout content-build
        uses: actions/checkout@v2

      - name: Restore vagovprod build
        run: |
          mkdir -p build
          cp -R /tmp/${{ github.run_id }}/test-build/vagovprod build/vagovprod
          du -h build/vagovprod

        # Required for Docker
      - name: Move VA cert to /etc/ssl/certs
        run: mv certs/VA-Internal-S2-RCA1-v1.pem /etc/ssl/certs/

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: on-demand-runner-cypress-${{ hashFiles('**/yarn.lock') }}
          restore-keys: on-demand-runner-cypress-
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            /github/home/.cache/Cypress
            **/node_modules

      - name: Start server
        run: node src/platform/testing/e2e/test-server.js --buildtype vagovprod --port=3002 &

      - name: Run Cypress tests
        run: yarn cy:run --reporter cypress-multi-reporters --reporter-options "configFile=config/cypress-reporters.json" --env buildtype=vagovprod

      - name: Publish test results
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v2.4.2
        with:
          check_name: 'Cypress Tests Summary'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'test-results/e2e-test-output-*.xml'

      - name: Archive Cypress test videos
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-video-artifacts
          path: cypress/videos

      - name: Archive Cypress test screenshots
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: cypress-screenshot-artifacts
          path: cypress/screenshots

      - name: Archive Mochawesome test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: cypress-mochawesome-test-results
          path: cypress/results
          retention-days: 1

      - name: Notify Slack about Cypress test failures
        if: ${{ github.ref == 'refs/heads/master' && failure() }}
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        env:
          SSL_CERT_DIR: /etc/ssl/certs
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "<!here> E2E tests in `content-build` have failed on the `master` branch, run: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}>"}]'
          channel_id: C026PD47Z19
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  testing-reports:
    name: Testing Reports
    runs-on: ubuntu-latest
    needs: [cypress-tests]
    if: ${{ needs.cypress-tests.result == 'failure' || needs.cypress-tests.result == 'success' }}
    continue-on-error: true
    timeout-minutes: 30
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get va-vsp-bot token
        uses: marvinpinto/action-inject-ssm-secrets@v1.1.1
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      # ------------------------
      # | Upload BigQuery Data |
      # ------------------------

      - name: Checkout Testing Tools Team Dashboard Data repo
        uses: actions/checkout@v2
        with:
          repository: department-of-veterans-affairs/testing-tools-team-dashboard-data
          token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          path: testing-tools-team-dashboard-data

      # TODO: Set .nvmrc in testing-tools-team-dashboard-data.
      # - name: Get Node version
      #   id: get-node-version
      #   run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      #   working-directory: testing-tools-team-dashboard-data

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14 # ${{ steps.get-node-version.outputs.NODE_VERSION }}

      # TODO: Potentially use install composite
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --production=false
        env:
          YARN_CACHE_FOLDER: .cache/yarn
        working-directory: testing-tools-team-dashboard-data

      - name: Download Mochawesome test results
        uses: actions/download-artifact@v2
        with:
          name: cypress-mochawesome-test-results
          path: testing-tools-team-dashboard-data/src/mochawesome/data

      - name: Get BigQuery service credentials
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/testing-team/bigquery_service_credentials
          env_variable_name: BIGQUERY_SERVICE_CREDENTIALS

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: vsp-analytics-and-insights
          service_account_key: ${{ env.BIGQUERY_SERVICE_CREDENTIALS }}
          export_default_credentials: true

      - name: Set UUID for Mochawesome report
        run: echo "UUID=$(uuidgen)" >> $GITHUB_ENV

      - name: Create report and post results to BigQuery
        run: yarn cypress-mochawesome-to-bigquery
        working-directory: testing-tools-team-dashboard-data
        env:
          IS_MASTER_BUILD: ${{ needs.cypress-tests-prep.outputs.is_master_build }}
          NUM_CONTAINERS: ${{ needs.cypress-tests-prep.outputs.num_containers }}
          TEST_EXECUTIONS_TABLE_NAME: content_build_cypress_test_suite_executions
          TEST_RESULTS_TABLE_NAME: content_build_cypress_test_results
          TEST_REPORTS_FOLDER_NAME: content-build-cypress-reports

      # env.MOCHAWESOME_REPORT_RESULTS is set and exported during the above step when the mochawesome report is generated.  It contains the output string for the publish step at the end of the job with the numbers from the Mochawesome report.

      # --------------------------
      # | Publish Testing Report |
      # --------------------------

      - name: Download video artifacts
        if: ${{ needs.cypress-tests.result == 'failure' }}
        uses: actions/download-artifact@v2
        with:
          name: cypress-video-artifacts
          path: testing-tools-team-dashboard-data/cypress-reports/videos/${{ env.UUID }}

      - name: Get AWS IAM role
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload test videos to s3
        if: ${{ needs.cypress-tests.result == 'failure' }}
        run: aws s3 cp testing-tools-team-dashboard-data/cypress-reports/videos/${{ env.UUID }} s3://testing-tools-testing-reports/content-build-cypress-reports/videos/${{ env.UUID }} --acl public-read --region us-gov-west-1 --recursive

      - name: Upload test report to s3
        run: aws s3 cp testing-tools-team-dashboard-data/mochawesome-report s3://testing-tools-testing-reports/content-build-cypress-reports --acl public-read --region us-gov-west-1 --recursive

      # -------------------------
      # | Cypress Tests Summary |
      # -------------------------

      - name: Publish Cypress test results
        if: ${{ always() }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Cypress Tests Summary
          conclusion: ${{ needs.cypress-tests.result }}
          output: |
            {"summary":${{ env.MOCHAWESOME_REPORT_RESULTS }}}

  archive:
    name: Archive
    runs-on: ${{ needs.start-runner.outputs[matrix.buildtype]}}
    needs:
      [
        start-runner,
        cypress-tests,
        unit-tests,
        linting,
        security-audit,
        drupal-cache-test,
      ]

    strategy:
      fail-fast: true
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Restore ${{ matrix.buildtype }} build
        run: |
          mv /tmp/${{ github.run_id }}/${{ matrix.buildtype }}.tar.bz2 .
          df -h
          du -h ${{ matrix.buildtype }}.tar.bz2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload build
        run: aws s3 cp ${{ matrix.buildtype }}.tar.bz2 s3://vetsgov-website-builds-s3-upload/content-build/${{ github.sha }}/${{ matrix.buildtype }}.tar.bz2 --acl public-read --region us-gov-west-1

  cache-drupal-content:
    name: Cache Drupal Content
    runs-on: ${{ needs.start-runner.outputs[matrix.buildtype] }}
    needs: [start-runner, archive]
    if: ${{ always() && github.ref == 'refs/heads/master' && needs.archive.result == 'success' }}
    env:
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore ${{ matrix.buildtype }} cache
        run: |
          mkdir -p .cache
          mv /tmp/${{ github.run_id }}/.cache/${{ matrix.buildtype }} .cache/${{ matrix.buildtype }}
          df -h
          du -h .cache/${{ matrix.buildtype }}

      - name: Install dependencies
        uses: ./.github/workflows/install
        with:
          key: ${{ hashFiles('yarn.lock') }}
          yarn_cache_folder: .cache/yarn
          path: |
            .cache/yarn
            node_modules

      - name: Cache drupal
        run: node ./script/drupal-aws-cache.js --buildtype=${{ matrix.buildtype }}

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Upload drupal cache
        run: aws s3 sync .cache/content s3://vetsgov-website-builds-s3-upload/content/ --acl public-read --region us-gov-west-1 --quiet

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' && needs.archive.result == 'success' }}
    needs: [build, archive, cache-drupal-content]

    strategy:
      matrix:
        include:
          - environment: vagovdev
            bucket: content.dev.va.gov
          - environment: vagovstaging
            bucket: content.staging.va.gov

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials (1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get role from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /frontend-team/github-actions/parameters/AWS_FRONTEND_NONPROD_ROLE
          env_variable_name: AWS_FRONTEND_NONPROD_ROLE

      - name: Get Drupal token from Parameter Store
        if: ${{ matrix.environment == 'vagovstaging' }}
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /dsva-vagov/vets-website/staging/drupal-password
          env_variable_name: CALLBACK_TOKEN

      - name: Configure AWS Credentials (2)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ env.AWS_FRONTEND_NONPROD_ROLE }}
          role-duration-seconds: 900
          role-session-name: vsp-frontendteam-githubaction

      - name: Deploy
        run: ./script/github-actions/deploy.sh -s $SRC -d $DEST -v
        env:
          SRC: s3://vetsgov-website-builds-s3-upload/content-build/${{ github.sha }}/${{ matrix.environment }}.tar.bz2
          DEST: s3://${{ matrix.bucket }}

      - name: CMS GovDelivery callback
        if: ${{ matrix.environment == 'vagovstaging' }}
        uses: fjogeleit/http-request-action@master
        continue-on-error: true
        with:
          url: https://staging.cms.va.gov/api/govdelivery_bulletins/queue?EndTime=${{ needs.build.outputs.vagovstaging_buildtime }}
          method: POST
          username: api
          password: ${{ env.CALLBACK_TOKEN }}

  stop-runner:
    name: Stop on-demand-runner
    needs: [start-runner, cypress-tests, archive, cache-drupal-content]
    runs-on: ubuntu-latest
    if: ${{ always() }} # Even if an error happened, let's stop the runner
    env:
      INSTANCE_TYPE: c5.4xlarge

    strategy:
      fail-fast: false
      matrix:
        buildtype: [vagovdev, vagovstaging, vagovprod]
        include:
          - buildtype: vagovdev
            id: vagovdev-id
          - buildtype: vagovstaging
            id: vagovstaging-id
          - buildtype: vagovprod
            id: vagovprod-id

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Stop Runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
          label: ${{ needs.start-runner.outputs[matrix.buildtype]}}
          ec2-instance-id: ${{ needs.start-runner.outputs[matrix.id]}}

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && (failure() || cancelled()) }}
    needs: deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Notify Slack
        uses: ./.github/workflows/slack-notify
        continue-on-error: true
        with:
          attachments: '[{"mrkdwn_in": ["text"], "color": "danger", "text": "content-build master branch CI failed!: <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}>"}]'
          channel_id: ${{ env.DEVOPS_CHANNEL_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
